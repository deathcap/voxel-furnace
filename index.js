// Generated by CoffeeScript 1.7.0
(function() {
  var Furnace, FurnaceDialog, Inventory, InventoryDialog, InventoryWindow, ItemPile,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InventoryDialog = (require('voxel-inventory-dialog')).InventoryDialog;

  Inventory = require('inventory');

  InventoryWindow = require('inventory-window');

  ItemPile = require('itempile');

  module.exports = function(game, opts) {
    return new Furnace(game, opts);
  };

  module.exports.pluginInfo = {
    loadAfter: ['voxel-registry', 'voxel-recipes', 'voxel-carry', 'voxel-blockdata']
  };

  Furnace = (function() {
    function Furnace(game, opts) {
      var _ref, _ref1, _ref2, _ref3;
      this.game = game;
      if (opts == null) {
        opts = {};
      }
      this.playerInventory = (function() {
        var _ref1, _ref2, _ref3;
        if ((_ref = (_ref1 = (_ref2 = game.plugins) != null ? (_ref3 = _ref2.get('voxel-carry')) != null ? _ref3.inventory : void 0 : void 0) != null ? _ref1 : opts.playerInventory) != null) {
          return _ref;
        } else {
          throw new Error('voxel-furnace requires "voxel-carry" plugin or "playerInventory" set to inventory instance');
        }
      })();
      this.registry = (function() {
        var _ref2;
        if ((_ref1 = (_ref2 = game.plugins) != null ? _ref2.get('voxel-registry') : void 0) != null) {
          return _ref1;
        } else {
          throw new Error('voxel-furnace requires "voxel-registry" plugin');
        }
      })();
      this.recipes = (function() {
        var _ref3;
        if ((_ref2 = (_ref3 = game.plugins) != null ? _ref3.get('voxel-recipes') : void 0) != null) {
          return _ref2;
        } else {
          throw new Error('voxel-furnace requires "voxel-recipes" plugin');
        }
      })();
      if (this.recipes.registerSmelting == null) {
        throw new Error('voxel-furnace requires voxel-recipes with smelting recipes');
      }
      this.blockdata = (function() {
        var _ref4;
        if ((_ref3 = (_ref4 = game.plugins) != null ? _ref4.get('voxel-blockdata') : void 0) != null) {
          return _ref3;
        } else {
          throw new Error('voxel-furnace requires "voxel-blockdata plugin');
        }
      })();
      if (opts.registerBlock == null) {
        opts.registerBlock = true;
      }
      if (opts.registerRecipe == null) {
        opts.registerRecipe = true;
      }
      if (opts.registerItems == null) {
        opts.registerItems = true;
      }
      if (opts.registerRecipes == null) {
        opts.registerRecipes = true;
      }
      if (this.game.isClient) {
        this.furnaceDialog = new FurnaceDialog(game, this.playerInventory, this.registry, this.recipes, this.blockdata);
      }
      this.opts = opts;
      this.enable();
    }

    Furnace.prototype.enable = function() {
      if (this.opts.registerBlock) {
        this.registry.registerBlock('furnace', {
          texture: ['furnace_top', 'cobblestone', 'furnace_front_on'],
          onInteract: (function(_this) {
            return function(target) {
              _this.furnaceDialog.open(target);
              return true;
            };
          })(this)
        });
      }
      if (this.opts.registerRecipe) {
        this.recipes.registerPositional([['cobblestone', 'cobblestone', 'cobblestone'], ['cobblestone', void 0, 'cobblestone'], ['cobblestone', 'cobblestone', 'cobblestone']], ['furnace']);
      }
      if (this.opts.registerItems) {
        this.registry.registerItem('ingotIron', {
          itemTexture: 'i/iron_ingot',
          displayName: 'Iron Ingot'
        });
      }
      if (this.opts.registerRecipes) {
        this.recipes.registerSmelting('oreIron', new ItemPile('ingotIron'));
        this.recipes.registerSmelting('oreCoal', new ItemPile('coal'));
        return this.recipes.registerSmelting('cobblestone', new ItemPile('stone'));
      }
    };

    Furnace.prototype.disable = function() {};

    return Furnace;

  })();

  FurnaceDialog = (function(_super) {
    __extends(FurnaceDialog, _super);

    function FurnaceDialog(game, playerInventory, registry, recipes, blockdata) {
      var allDiv, bfDiv, burnCont, fuelCont, resultCont;
      this.game = game;
      this.playerInventory = playerInventory;
      this.registry = registry;
      this.recipes = recipes;
      this.blockdata = blockdata;
      this.burnInventory = new Inventory(1);
      this.burnInventory.on('changed', (function(_this) {
        return function() {
          return _this.updateSmelting();
        };
      })(this));
      this.burnIW = new InventoryWindow({
        width: 1,
        registry: this.registry,
        inventory: this.burnInventory,
        linkedInventory: this.playerInventory
      });
      this.fuelInventory = new Inventory(1);
      this.fuelInventory.on('changed', (function(_this) {
        return function() {
          return _this.updateSmelting();
        };
      })(this));
      this.fuelIW = new InventoryWindow({
        width: 1,
        registry: this.registry,
        inventory: this.fuelInventory,
        linkedInventory: this.playerInventory
      });
      this.resultInventory = new Inventory(1);
      this.resultIW = new InventoryWindow({
        inventory: this.resultInventory,
        registry: this.registry,
        allowDrop: false,
        linkedInventory: this.playerInventory
      });
      this.resultIW.on('pickup', (function(_this) {
        return function() {
          return _this.updateSmelting();
        };
      })(this));
      allDiv = document.createElement('div');
      allDiv.style.display = 'flex';
      allDiv.style.justifyContent = 'center';
      allDiv.style.width = '100%';
      burnCont = this.burnIW.createContainer();
      fuelCont = this.fuelIW.createContainer();
      resultCont = this.resultIW.createContainer();
      burnCont.style.display = 'flex';
      burnCont.style.flex = '1';
      fuelCont.style.display = 'flex';
      resultCont.style.display = 'flex';
      resultCont.style.flexFlow = 'column';
      resultCont.style.justifyContent = 'center';
      bfDiv = document.createElement('div');
      bfDiv.style.display = 'flex';
      bfDiv.style.flexFlow = 'column';
      bfDiv.style.paddingTop = '10px';
      bfDiv.style.paddingRight = '50px';
      bfDiv.appendChild(burnCont);
      bfDiv.appendChild(fuelCont);
      allDiv.appendChild(bfDiv);
      allDiv.appendChild(resultCont);
      FurnaceDialog.__super__.constructor.call(this, game, {
        playerLinkedInventory: this.burnInventory,
        upper: [allDiv]
      });
    }

    FurnaceDialog.prototype.updateSmelting = function() {
      var burn, fuel, smeltedOutput;
      if (this.isSmelting) {
        return;
      }
      this.isSmelting = true;
      while (true) {
        if (!this.isFuel(this.fuelInventory.get(0))) {
          break;
        }
        smeltedOutput = this.recipes.smelt(this.burnInventory.get(0));
        if (smeltedOutput == null) {
          break;
        }
        if (this.resultInventory.get(0) && (this.resultInventory.get(0).item !== smeltedOutput.item || this.resultInventory.get(0).count === 64)) {
          break;
        }
        console.log("smelting: " + this.fuelInventory + " + " + this.burnInventory + " = " + this.resultInventory);
        fuel = this.fuelInventory.takeAt(0, 1);
        burn = this.burnInventory.takeAt(0, 1);
        this.resultInventory.give(smeltedOutput);
        console.log("smelted: " + this.fuelInventory + " + " + this.burnInventory + " = " + this.resultInventory);
      }
      this.isSmelting = false;
      return this.updateBlockdata();
    };

    FurnaceDialog.prototype.isFuel = function(itemPile) {
      var fuelBurnTime, props;
      if (!itemPile) {
        return false;
      }
      props = this.registry.getItemProps(itemPile.item);
      if (!props) {
        return false;
      }
      fuelBurnTime = props.fuelBurnTime;
      if (!fuelBurnTime) {
        return false;
      }
      return true;
    };

    FurnaceDialog.prototype.loadBlockdata = function(x, y, z) {
      var bd, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      bd = this.blockdata.get(x, y, z);
      if (bd != null) {
        this.burnInventory.set(0, ItemPile.fromString((_ref = bd.burn) != null ? _ref : ''));
        this.fuelInventory.set(0, ItemPile.fromString((_ref1 = bd.fuel) != null ? _ref1 : ''));
        this.resultInventory.set(0, ItemPile.fromString((_ref2 = bd.result) != null ? _ref2 : ''));
      } else {
        bd = {
          burn: (_ref3 = this.burnInventory.get(0)) != null ? _ref3.toString() : void 0,
          fuel: (_ref4 = this.fuelInventory.get(0)) != null ? _ref4.toString() : void 0,
          result: (_ref5 = this.resultInventory.get(0)) != null ? _ref5.toString() : void 0
        };
        this.blockdata.set(x, y, z, bd);
      }
      this.activeBlockdata = bd;
      return console.log('load bd', x, y, z, JSON.stringify(this.activeBlockdata));
    };

    FurnaceDialog.prototype.updateBlockdata = function() {
      var _ref, _ref1, _ref2;
      console.log("burn=" + this.burnInventory + ", fuel=" + this.fuelInventory + ", result=" + this.resultInventory);
      if (this.activeBlockdata == null) {
        return;
      }
      this.activeBlockdata.burn = (_ref = this.burnInventory.get(0)) != null ? _ref.toString() : void 0;
      this.activeBlockdata.fuel = (_ref1 = this.fuelInventory.get(0)) != null ? _ref1.toString() : void 0;
      this.activeBlockdata.result = (_ref2 = this.resultInventory.get(0)) != null ? _ref2.toString() : void 0;
      return console.log('update bd', JSON.stringify(this.activeBlockdata));
    };

    FurnaceDialog.prototype.open = function(target) {
      var x, y, z, _ref;
      _ref = target.voxel, x = _ref[0], y = _ref[1], z = _ref[2];
      this.loadBlockdata(x, y, z);
      return FurnaceDialog.__super__.open.call(this);
    };

    FurnaceDialog.prototype.close = function() {
      delete this.activeBlockdata;
      this.burnInventory.clear();
      this.fuelInventory.clear();
      this.resultInventory.clear();
      return FurnaceDialog.__super__.close.call(this);
    };

    return FurnaceDialog;

  })(InventoryDialog);

}).call(this);
